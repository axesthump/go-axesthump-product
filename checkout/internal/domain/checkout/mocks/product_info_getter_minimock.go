package mocks

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i route256/checkout/internal/domain/checkout.ProductInfoGetter -o ./mocks/product_info_getter_minimock.go -n ProductInfoGetterMock

import (
	"context"
	"route256/checkout/internal/models"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// ProductInfoGetterMock implements checkout.ProductInfoGetter
type ProductInfoGetterMock struct {
	t minimock.Tester

	funcGetProductsInfo          func(ctx context.Context, items []models.Item) (ia1 []models.Item, err error)
	inspectFuncGetProductsInfo   func(ctx context.Context, items []models.Item)
	afterGetProductsInfoCounter  uint64
	beforeGetProductsInfoCounter uint64
	GetProductsInfoMock          mProductInfoGetterMockGetProductsInfo
}

// NewProductInfoGetterMock returns a mock for checkout.ProductInfoGetter
func NewProductInfoGetterMock(t minimock.Tester) *ProductInfoGetterMock {
	m := &ProductInfoGetterMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetProductsInfoMock = mProductInfoGetterMockGetProductsInfo{mock: m}
	m.GetProductsInfoMock.callArgs = []*ProductInfoGetterMockGetProductsInfoParams{}

	return m
}

type mProductInfoGetterMockGetProductsInfo struct {
	mock               *ProductInfoGetterMock
	defaultExpectation *ProductInfoGetterMockGetProductsInfoExpectation
	expectations       []*ProductInfoGetterMockGetProductsInfoExpectation

	callArgs []*ProductInfoGetterMockGetProductsInfoParams
	mutex    sync.RWMutex
}

// ProductInfoGetterMockGetProductsInfoExpectation specifies expectation struct of the ProductInfoGetter.GetProductsInfo
type ProductInfoGetterMockGetProductsInfoExpectation struct {
	mock    *ProductInfoGetterMock
	params  *ProductInfoGetterMockGetProductsInfoParams
	results *ProductInfoGetterMockGetProductsInfoResults
	Counter uint64
}

// ProductInfoGetterMockGetProductsInfoParams contains parameters of the ProductInfoGetter.GetProductsInfo
type ProductInfoGetterMockGetProductsInfoParams struct {
	ctx   context.Context
	items []models.Item
}

// ProductInfoGetterMockGetProductsInfoResults contains results of the ProductInfoGetter.GetProductsInfo
type ProductInfoGetterMockGetProductsInfoResults struct {
	ia1 []models.Item
	err error
}

// Expect sets up expected params for ProductInfoGetter.GetProductsInfo
func (mmGetProductsInfo *mProductInfoGetterMockGetProductsInfo) Expect(ctx context.Context, items []models.Item) *mProductInfoGetterMockGetProductsInfo {
	if mmGetProductsInfo.mock.funcGetProductsInfo != nil {
		mmGetProductsInfo.mock.t.Fatalf("ProductInfoGetterMock.GetProductsInfo mock is already set by Set")
	}

	if mmGetProductsInfo.defaultExpectation == nil {
		mmGetProductsInfo.defaultExpectation = &ProductInfoGetterMockGetProductsInfoExpectation{}
	}

	mmGetProductsInfo.defaultExpectation.params = &ProductInfoGetterMockGetProductsInfoParams{ctx, items}
	for _, e := range mmGetProductsInfo.expectations {
		if minimock.Equal(e.params, mmGetProductsInfo.defaultExpectation.params) {
			mmGetProductsInfo.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetProductsInfo.defaultExpectation.params)
		}
	}

	return mmGetProductsInfo
}

// Inspect accepts an inspector function that has same arguments as the ProductInfoGetter.GetProductsInfo
func (mmGetProductsInfo *mProductInfoGetterMockGetProductsInfo) Inspect(f func(ctx context.Context, items []models.Item)) *mProductInfoGetterMockGetProductsInfo {
	if mmGetProductsInfo.mock.inspectFuncGetProductsInfo != nil {
		mmGetProductsInfo.mock.t.Fatalf("Inspect function is already set for ProductInfoGetterMock.GetProductsInfo")
	}

	mmGetProductsInfo.mock.inspectFuncGetProductsInfo = f

	return mmGetProductsInfo
}

// Return sets up results that will be returned by ProductInfoGetter.GetProductsInfo
func (mmGetProductsInfo *mProductInfoGetterMockGetProductsInfo) Return(ia1 []models.Item, err error) *ProductInfoGetterMock {
	if mmGetProductsInfo.mock.funcGetProductsInfo != nil {
		mmGetProductsInfo.mock.t.Fatalf("ProductInfoGetterMock.GetProductsInfo mock is already set by Set")
	}

	if mmGetProductsInfo.defaultExpectation == nil {
		mmGetProductsInfo.defaultExpectation = &ProductInfoGetterMockGetProductsInfoExpectation{mock: mmGetProductsInfo.mock}
	}
	mmGetProductsInfo.defaultExpectation.results = &ProductInfoGetterMockGetProductsInfoResults{ia1, err}
	return mmGetProductsInfo.mock
}

// Set uses given function f to mock the ProductInfoGetter.GetProductsInfo method
func (mmGetProductsInfo *mProductInfoGetterMockGetProductsInfo) Set(f func(ctx context.Context, items []models.Item) (ia1 []models.Item, err error)) *ProductInfoGetterMock {
	if mmGetProductsInfo.defaultExpectation != nil {
		mmGetProductsInfo.mock.t.Fatalf("Default expectation is already set for the ProductInfoGetter.GetProductsInfo method")
	}

	if len(mmGetProductsInfo.expectations) > 0 {
		mmGetProductsInfo.mock.t.Fatalf("Some expectations are already set for the ProductInfoGetter.GetProductsInfo method")
	}

	mmGetProductsInfo.mock.funcGetProductsInfo = f
	return mmGetProductsInfo.mock
}

// When sets expectation for the ProductInfoGetter.GetProductsInfo which will trigger the result defined by the following
// Then helper
func (mmGetProductsInfo *mProductInfoGetterMockGetProductsInfo) When(ctx context.Context, items []models.Item) *ProductInfoGetterMockGetProductsInfoExpectation {
	if mmGetProductsInfo.mock.funcGetProductsInfo != nil {
		mmGetProductsInfo.mock.t.Fatalf("ProductInfoGetterMock.GetProductsInfo mock is already set by Set")
	}

	expectation := &ProductInfoGetterMockGetProductsInfoExpectation{
		mock:   mmGetProductsInfo.mock,
		params: &ProductInfoGetterMockGetProductsInfoParams{ctx, items},
	}
	mmGetProductsInfo.expectations = append(mmGetProductsInfo.expectations, expectation)
	return expectation
}

// Then sets up ProductInfoGetter.GetProductsInfo return parameters for the expectation previously defined by the When method
func (e *ProductInfoGetterMockGetProductsInfoExpectation) Then(ia1 []models.Item, err error) *ProductInfoGetterMock {
	e.results = &ProductInfoGetterMockGetProductsInfoResults{ia1, err}
	return e.mock
}

// GetProductsInfo implements checkout.ProductInfoGetter
func (mmGetProductsInfo *ProductInfoGetterMock) GetProductsInfo(ctx context.Context, items []models.Item) (ia1 []models.Item, err error) {
	mm_atomic.AddUint64(&mmGetProductsInfo.beforeGetProductsInfoCounter, 1)
	defer mm_atomic.AddUint64(&mmGetProductsInfo.afterGetProductsInfoCounter, 1)

	if mmGetProductsInfo.inspectFuncGetProductsInfo != nil {
		mmGetProductsInfo.inspectFuncGetProductsInfo(ctx, items)
	}

	mm_params := &ProductInfoGetterMockGetProductsInfoParams{ctx, items}

	// Record call args
	mmGetProductsInfo.GetProductsInfoMock.mutex.Lock()
	mmGetProductsInfo.GetProductsInfoMock.callArgs = append(mmGetProductsInfo.GetProductsInfoMock.callArgs, mm_params)
	mmGetProductsInfo.GetProductsInfoMock.mutex.Unlock()

	for _, e := range mmGetProductsInfo.GetProductsInfoMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.ia1, e.results.err
		}
	}

	if mmGetProductsInfo.GetProductsInfoMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetProductsInfo.GetProductsInfoMock.defaultExpectation.Counter, 1)
		mm_want := mmGetProductsInfo.GetProductsInfoMock.defaultExpectation.params
		mm_got := ProductInfoGetterMockGetProductsInfoParams{ctx, items}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetProductsInfo.t.Errorf("ProductInfoGetterMock.GetProductsInfo got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetProductsInfo.GetProductsInfoMock.defaultExpectation.results
		if mm_results == nil {
			mmGetProductsInfo.t.Fatal("No results are set for the ProductInfoGetterMock.GetProductsInfo")
		}
		return (*mm_results).ia1, (*mm_results).err
	}
	if mmGetProductsInfo.funcGetProductsInfo != nil {
		return mmGetProductsInfo.funcGetProductsInfo(ctx, items)
	}
	mmGetProductsInfo.t.Fatalf("Unexpected call to ProductInfoGetterMock.GetProductsInfo. %v %v", ctx, items)
	return
}

// GetProductsInfoAfterCounter returns a count of finished ProductInfoGetterMock.GetProductsInfo invocations
func (mmGetProductsInfo *ProductInfoGetterMock) GetProductsInfoAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetProductsInfo.afterGetProductsInfoCounter)
}

// GetProductsInfoBeforeCounter returns a count of ProductInfoGetterMock.GetProductsInfo invocations
func (mmGetProductsInfo *ProductInfoGetterMock) GetProductsInfoBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetProductsInfo.beforeGetProductsInfoCounter)
}

// Calls returns a list of arguments used in each call to ProductInfoGetterMock.GetProductsInfo.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetProductsInfo *mProductInfoGetterMockGetProductsInfo) Calls() []*ProductInfoGetterMockGetProductsInfoParams {
	mmGetProductsInfo.mutex.RLock()

	argCopy := make([]*ProductInfoGetterMockGetProductsInfoParams, len(mmGetProductsInfo.callArgs))
	copy(argCopy, mmGetProductsInfo.callArgs)

	mmGetProductsInfo.mutex.RUnlock()

	return argCopy
}

// MinimockGetProductsInfoDone returns true if the count of the GetProductsInfo invocations corresponds
// the number of defined expectations
func (m *ProductInfoGetterMock) MinimockGetProductsInfoDone() bool {
	for _, e := range m.GetProductsInfoMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetProductsInfoMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetProductsInfoCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetProductsInfo != nil && mm_atomic.LoadUint64(&m.afterGetProductsInfoCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetProductsInfoInspect logs each unmet expectation
func (m *ProductInfoGetterMock) MinimockGetProductsInfoInspect() {
	for _, e := range m.GetProductsInfoMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ProductInfoGetterMock.GetProductsInfo with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetProductsInfoMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetProductsInfoCounter) < 1 {
		if m.GetProductsInfoMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to ProductInfoGetterMock.GetProductsInfo")
		} else {
			m.t.Errorf("Expected call to ProductInfoGetterMock.GetProductsInfo with params: %#v", *m.GetProductsInfoMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetProductsInfo != nil && mm_atomic.LoadUint64(&m.afterGetProductsInfoCounter) < 1 {
		m.t.Error("Expected call to ProductInfoGetterMock.GetProductsInfo")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *ProductInfoGetterMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockGetProductsInfoInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *ProductInfoGetterMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *ProductInfoGetterMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetProductsInfoDone()
}
