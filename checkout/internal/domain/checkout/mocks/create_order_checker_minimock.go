package mocks

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i route256/checkout/internal/domain/checkout.CreateOrderChecker -o ./mocks/create_order_checker_minimock.go -n CreateOrderCheckerMock

import (
	"context"
	"route256/checkout/internal/models"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// CreateOrderCheckerMock implements checkout.CreateOrderChecker
type CreateOrderCheckerMock struct {
	t minimock.Tester

	funcCreateOrder          func(ctx context.Context, user int64, items []models.CreateOrderItem) (i1 int64, err error)
	inspectFuncCreateOrder   func(ctx context.Context, user int64, items []models.CreateOrderItem)
	afterCreateOrderCounter  uint64
	beforeCreateOrderCounter uint64
	CreateOrderMock          mCreateOrderCheckerMockCreateOrder
}

// NewCreateOrderCheckerMock returns a mock for checkout.CreateOrderChecker
func NewCreateOrderCheckerMock(t minimock.Tester) *CreateOrderCheckerMock {
	m := &CreateOrderCheckerMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.CreateOrderMock = mCreateOrderCheckerMockCreateOrder{mock: m}
	m.CreateOrderMock.callArgs = []*CreateOrderCheckerMockCreateOrderParams{}

	return m
}

type mCreateOrderCheckerMockCreateOrder struct {
	mock               *CreateOrderCheckerMock
	defaultExpectation *CreateOrderCheckerMockCreateOrderExpectation
	expectations       []*CreateOrderCheckerMockCreateOrderExpectation

	callArgs []*CreateOrderCheckerMockCreateOrderParams
	mutex    sync.RWMutex
}

// CreateOrderCheckerMockCreateOrderExpectation specifies expectation struct of the CreateOrderChecker.CreateOrder
type CreateOrderCheckerMockCreateOrderExpectation struct {
	mock    *CreateOrderCheckerMock
	params  *CreateOrderCheckerMockCreateOrderParams
	results *CreateOrderCheckerMockCreateOrderResults
	Counter uint64
}

// CreateOrderCheckerMockCreateOrderParams contains parameters of the CreateOrderChecker.CreateOrder
type CreateOrderCheckerMockCreateOrderParams struct {
	ctx   context.Context
	user  int64
	items []models.CreateOrderItem
}

// CreateOrderCheckerMockCreateOrderResults contains results of the CreateOrderChecker.CreateOrder
type CreateOrderCheckerMockCreateOrderResults struct {
	i1  int64
	err error
}

// Expect sets up expected params for CreateOrderChecker.CreateOrder
func (mmCreateOrder *mCreateOrderCheckerMockCreateOrder) Expect(ctx context.Context, user int64, items []models.CreateOrderItem) *mCreateOrderCheckerMockCreateOrder {
	if mmCreateOrder.mock.funcCreateOrder != nil {
		mmCreateOrder.mock.t.Fatalf("CreateOrderCheckerMock.CreateOrder mock is already set by Set")
	}

	if mmCreateOrder.defaultExpectation == nil {
		mmCreateOrder.defaultExpectation = &CreateOrderCheckerMockCreateOrderExpectation{}
	}

	mmCreateOrder.defaultExpectation.params = &CreateOrderCheckerMockCreateOrderParams{ctx, user, items}
	for _, e := range mmCreateOrder.expectations {
		if minimock.Equal(e.params, mmCreateOrder.defaultExpectation.params) {
			mmCreateOrder.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCreateOrder.defaultExpectation.params)
		}
	}

	return mmCreateOrder
}

// Inspect accepts an inspector function that has same arguments as the CreateOrderChecker.CreateOrder
func (mmCreateOrder *mCreateOrderCheckerMockCreateOrder) Inspect(f func(ctx context.Context, user int64, items []models.CreateOrderItem)) *mCreateOrderCheckerMockCreateOrder {
	if mmCreateOrder.mock.inspectFuncCreateOrder != nil {
		mmCreateOrder.mock.t.Fatalf("Inspect function is already set for CreateOrderCheckerMock.CreateOrder")
	}

	mmCreateOrder.mock.inspectFuncCreateOrder = f

	return mmCreateOrder
}

// Return sets up results that will be returned by CreateOrderChecker.CreateOrder
func (mmCreateOrder *mCreateOrderCheckerMockCreateOrder) Return(i1 int64, err error) *CreateOrderCheckerMock {
	if mmCreateOrder.mock.funcCreateOrder != nil {
		mmCreateOrder.mock.t.Fatalf("CreateOrderCheckerMock.CreateOrder mock is already set by Set")
	}

	if mmCreateOrder.defaultExpectation == nil {
		mmCreateOrder.defaultExpectation = &CreateOrderCheckerMockCreateOrderExpectation{mock: mmCreateOrder.mock}
	}
	mmCreateOrder.defaultExpectation.results = &CreateOrderCheckerMockCreateOrderResults{i1, err}
	return mmCreateOrder.mock
}

// Set uses given function f to mock the CreateOrderChecker.CreateOrder method
func (mmCreateOrder *mCreateOrderCheckerMockCreateOrder) Set(f func(ctx context.Context, user int64, items []models.CreateOrderItem) (i1 int64, err error)) *CreateOrderCheckerMock {
	if mmCreateOrder.defaultExpectation != nil {
		mmCreateOrder.mock.t.Fatalf("Default expectation is already set for the CreateOrderChecker.CreateOrder method")
	}

	if len(mmCreateOrder.expectations) > 0 {
		mmCreateOrder.mock.t.Fatalf("Some expectations are already set for the CreateOrderChecker.CreateOrder method")
	}

	mmCreateOrder.mock.funcCreateOrder = f
	return mmCreateOrder.mock
}

// When sets expectation for the CreateOrderChecker.CreateOrder which will trigger the result defined by the following
// Then helper
func (mmCreateOrder *mCreateOrderCheckerMockCreateOrder) When(ctx context.Context, user int64, items []models.CreateOrderItem) *CreateOrderCheckerMockCreateOrderExpectation {
	if mmCreateOrder.mock.funcCreateOrder != nil {
		mmCreateOrder.mock.t.Fatalf("CreateOrderCheckerMock.CreateOrder mock is already set by Set")
	}

	expectation := &CreateOrderCheckerMockCreateOrderExpectation{
		mock:   mmCreateOrder.mock,
		params: &CreateOrderCheckerMockCreateOrderParams{ctx, user, items},
	}
	mmCreateOrder.expectations = append(mmCreateOrder.expectations, expectation)
	return expectation
}

// Then sets up CreateOrderChecker.CreateOrder return parameters for the expectation previously defined by the When method
func (e *CreateOrderCheckerMockCreateOrderExpectation) Then(i1 int64, err error) *CreateOrderCheckerMock {
	e.results = &CreateOrderCheckerMockCreateOrderResults{i1, err}
	return e.mock
}

// CreateOrder implements checkout.CreateOrderChecker
func (mmCreateOrder *CreateOrderCheckerMock) CreateOrder(ctx context.Context, user int64, items []models.CreateOrderItem) (i1 int64, err error) {
	mm_atomic.AddUint64(&mmCreateOrder.beforeCreateOrderCounter, 1)
	defer mm_atomic.AddUint64(&mmCreateOrder.afterCreateOrderCounter, 1)

	if mmCreateOrder.inspectFuncCreateOrder != nil {
		mmCreateOrder.inspectFuncCreateOrder(ctx, user, items)
	}

	mm_params := &CreateOrderCheckerMockCreateOrderParams{ctx, user, items}

	// Record call args
	mmCreateOrder.CreateOrderMock.mutex.Lock()
	mmCreateOrder.CreateOrderMock.callArgs = append(mmCreateOrder.CreateOrderMock.callArgs, mm_params)
	mmCreateOrder.CreateOrderMock.mutex.Unlock()

	for _, e := range mmCreateOrder.CreateOrderMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.i1, e.results.err
		}
	}

	if mmCreateOrder.CreateOrderMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCreateOrder.CreateOrderMock.defaultExpectation.Counter, 1)
		mm_want := mmCreateOrder.CreateOrderMock.defaultExpectation.params
		mm_got := CreateOrderCheckerMockCreateOrderParams{ctx, user, items}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCreateOrder.t.Errorf("CreateOrderCheckerMock.CreateOrder got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCreateOrder.CreateOrderMock.defaultExpectation.results
		if mm_results == nil {
			mmCreateOrder.t.Fatal("No results are set for the CreateOrderCheckerMock.CreateOrder")
		}
		return (*mm_results).i1, (*mm_results).err
	}
	if mmCreateOrder.funcCreateOrder != nil {
		return mmCreateOrder.funcCreateOrder(ctx, user, items)
	}
	mmCreateOrder.t.Fatalf("Unexpected call to CreateOrderCheckerMock.CreateOrder. %v %v %v", ctx, user, items)
	return
}

// CreateOrderAfterCounter returns a count of finished CreateOrderCheckerMock.CreateOrder invocations
func (mmCreateOrder *CreateOrderCheckerMock) CreateOrderAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateOrder.afterCreateOrderCounter)
}

// CreateOrderBeforeCounter returns a count of CreateOrderCheckerMock.CreateOrder invocations
func (mmCreateOrder *CreateOrderCheckerMock) CreateOrderBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateOrder.beforeCreateOrderCounter)
}

// Calls returns a list of arguments used in each call to CreateOrderCheckerMock.CreateOrder.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCreateOrder *mCreateOrderCheckerMockCreateOrder) Calls() []*CreateOrderCheckerMockCreateOrderParams {
	mmCreateOrder.mutex.RLock()

	argCopy := make([]*CreateOrderCheckerMockCreateOrderParams, len(mmCreateOrder.callArgs))
	copy(argCopy, mmCreateOrder.callArgs)

	mmCreateOrder.mutex.RUnlock()

	return argCopy
}

// MinimockCreateOrderDone returns true if the count of the CreateOrder invocations corresponds
// the number of defined expectations
func (m *CreateOrderCheckerMock) MinimockCreateOrderDone() bool {
	for _, e := range m.CreateOrderMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CreateOrderMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCreateOrderCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreateOrder != nil && mm_atomic.LoadUint64(&m.afterCreateOrderCounter) < 1 {
		return false
	}
	return true
}

// MinimockCreateOrderInspect logs each unmet expectation
func (m *CreateOrderCheckerMock) MinimockCreateOrderInspect() {
	for _, e := range m.CreateOrderMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CreateOrderCheckerMock.CreateOrder with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CreateOrderMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCreateOrderCounter) < 1 {
		if m.CreateOrderMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CreateOrderCheckerMock.CreateOrder")
		} else {
			m.t.Errorf("Expected call to CreateOrderCheckerMock.CreateOrder with params: %#v", *m.CreateOrderMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreateOrder != nil && mm_atomic.LoadUint64(&m.afterCreateOrderCounter) < 1 {
		m.t.Error("Expected call to CreateOrderCheckerMock.CreateOrder")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *CreateOrderCheckerMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockCreateOrderInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *CreateOrderCheckerMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *CreateOrderCheckerMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockCreateOrderDone()
}
